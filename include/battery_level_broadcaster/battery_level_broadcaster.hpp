#ifndef BATTERY_LEVEL_BROADCASTER__BATTERY_LEVEL_BROADCASTER_HPP_
#define BATTERY_LEVEL_BROADCASTER__BATTERY_LEVEL_BROADCASTER_HPP_

#include <memory>

#include "controller_interface/controller_interface.hpp"
#include "battery_level_broadcaster/visibility_control.h"
// auto-generated by generate_parameter_library
#include "battery_level_broadcaster_parameters.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_publisher.h"
#include "sensor_msgs/msg/battery_state.hpp"
#include "battery_level_broadcaster/battery_sensor.hpp"

namespace netizen_robotics
{
    class BatteryLevelBroadcaster : public controller_interface::ControllerInterface
    {
    public:
        BATTERY_LEVEL_BROADCASTER_PUBLIC
        controller_interface::InterfaceConfiguration command_interface_configuration() const override;

        BATTERY_LEVEL_BROADCASTER_PUBLIC
        controller_interface::InterfaceConfiguration state_interface_configuration() const override;

        BATTERY_LEVEL_BROADCASTER_PUBLIC controller_interface::CallbackReturn on_init() override;

        BATTERY_LEVEL_BROADCASTER_PUBLIC
        controller_interface::CallbackReturn on_configure(
            const rclcpp_lifecycle::State &previous_state) override;

        BATTERY_LEVEL_BROADCASTER_PUBLIC
        controller_interface::CallbackReturn on_activate(
            const rclcpp_lifecycle::State &previous_state) override;

        BATTERY_LEVEL_BROADCASTER_PUBLIC
        controller_interface::CallbackReturn on_deactivate(
            const rclcpp_lifecycle::State &previous_state) override;

        BATTERY_LEVEL_BROADCASTER_PUBLIC
        controller_interface::return_type update(
            const rclcpp::Time &time, const rclcpp::Duration &period) override;

    protected:
        std::shared_ptr<battery_level_broadcaster::ParamListener> param_listener_;
        battery_level_broadcaster::Params params_;
        std::unique_ptr<BatterySensor> battery_sensor_;

        using StatePublisher = realtime_tools::RealtimePublisher<sensor_msgs::msg::BatteryState>;
        rclcpp::Publisher<sensor_msgs::msg::BatteryState>::SharedPtr sensor_state_publisher_;
        std::unique_ptr<StatePublisher> realtime_publisher_;
    };

} // namespace netizen_robotics

#endif // BATTERY_LEVEL_BROADCASTER__BATTERY_LEVEL_BROADCASTER_HPP_